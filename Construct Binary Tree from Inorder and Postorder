----------------------------------------------------------------------------------------------Question-------------------------------------------------------------------------------------------
Given inorder and postorder traversals of a binary tree(having n nodes) in the arrays in[] and post[] respectively. The task is to construct a binary tree from these traversals.

Driver code will print the preorder traversal of the constructed tree.

----------------------------------------------------------------------------------------------Example-------------------------------------------------------------------------------------------
Example 1:

Input:
n = 8
in[] = {4, 8, 2, 5, 1, 6, 3, 7}
post[] = {8, 4, 5, 2, 6, 7, 3, 1}
Output: 
1 2 4 8 5 3 6 7
Explanation: 
For the given postorder and inorder traversal of tree the  resultant binary tree will be
          1
       /      \
     2        3
   /  \      /  \
  4   5    6   7
   \
    8
Example 2:

Input:
n = 5
in[] = {9, 5, 2, 3, 4}
post[] = {5, 9, 3, 4, 2}
Output: 
2 9 5 4 3
Explanation:  
The  resultant binary tree will be
           2
        /     \
       9      4
        \     /
         5   3



----------------------------------------------------------------------------------------------Intution-------------------------------------------------------------------------------------------

Understanding Traversals:
Inorder traversal: Traverses the left subtree, then visits the root, and finally traverses the right subtree.
Postorder traversal: Traverses the left subtree, then the right subtree, and finally visits the root.
Identifying Root from Postorder:
The last element of the postorder traversal array represents the root of the binary tree.
Locating Root in Inorder:
We search for the root value from the postorder traversal within the inorder traversal array. The index where we find this value divides the inorder array into left and right subtrees.
Recursion for Subtrees:
Once we find the root in the inorder array, we determine the size of the left and right subtrees.
Recursively, we construct the left subtree using elements before the root index in inorder and postorder arrays.
Similarly, we construct the right subtree using elements after the root index in both arrays.
Recursive Base Case:
If the start index of any subtree is greater than the end index, it means that subtree is empty, so we return null.
Returning the Root:
Finally, we return the root node of the constructed binary tree.

----------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------
class GfG{
    
    Node solve(int[] in, int[] pos, int inStart, int inEnd, int posStart, int posEnd) {
        if (inStart > inEnd) return null;
        if (inStart == inEnd) {
            return new Node(in[inStart]);
        }
        Node root = new Node(pos[posEnd]);
        int ind = -1;
        for (int i = inStart; i <= inEnd; i++) {
            if (in[i] == pos[posEnd]) {
                ind = i;
                break;
            }
        }
        int left = ind - inStart;
        int right = inEnd - ind;

        root.left = solve(in, pos, inStart, ind - 1, posStart, posStart + left - 1);
        root.right = solve(in, pos, ind + 1, inEnd, posEnd - right, posEnd - 1);

        return root;
    }

    // Function to return a tree created from postorder and inorder traversals.
    Node buildTree(int[] in, int[] post, int n) {
        // Your code here
        return solve(in, post, 0, n - 1, 0, n - 1);
    }
}


