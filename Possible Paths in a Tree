------------------------------------------------------------------------------------------------------Question-------------------------------------------------------------------------------------------------------
Given a weighted tree with n nodes and (n-1) edges. You are given q queries. Each query contains a number x. For each query, 
find the number of paths in which the maximum edge weight is less than or equal to x.

Note: Path from A to B and B to A are considered to be the same.
------------------------------------------------------------------------------------------------------Example-------------------------------------------------------------------------------------------------------
Example 1:
Input: 
n = 7
edges {start, end, weight} = {{1, 2, 3}, {2, 3, 1}, {2, 4, 9}, {3, 6, 7}, {3, 5, 8}, {5, 7, 4}}
q = 3
queries[] = {1, 3, 5}
Output: 
1 3 4
Explanation: 
Query 1: Path from 2 to 3
Query 2: Path from 1 to 2, 1 to 3, and 2 to 3
Query 3: Path from 1 to 2, 1 to 3, 2 to 3, and 5 to 7
---------------------------------------------------------------------------------------------------Intution-------------------------------------------------------------------------------------------------------
Union-Find Data Structure:
The code utilizes a union-find data structure to efficiently manage connected components in the graph.
The root function finds the root of a given node by traversing parent pointers until it reaches the root. It also performs path compression to optimize future root finding operations.
The union function performs the union operation between two nodes. It merges the components represented by the roots of the input nodes and updates the parent and size arrays accordingly.

Edge Processing and Sorting:
The code initializes an ArrayList wt to store the edges of the graph along with their weights.
Each edge is represented as an array containing the weight of the edge and the indices of the connected nodes.
The edges are sorted based on their weights in ascending order using Collections.sort.

Calculating Maximum Weight:
The code iterates through the sorted edges and performs union operations on the connected nodes.
As edges are processed, the ans variable accumulates the total weight of merged components.
The result of each union operation (i.e., the updated total weight) is stored in a TreeMap mp, where the key is the weight of the edge and the value is the total weight after merging.

Query Processing:
For each query, the code searches for the maximum weight less than or equal to the query value in the TreeMap mp.
If such a weight is found, the corresponding total weight (value) is added to the result list. Otherwise, 0 is added to indicate no edge with weight less than or equal to the query value was found.

Return Result:
The code returns the list of results containing the maximum weight of edges for each query.

----------------------------------------------------------------------------------------------------Code----------------------------------------------------------------------------------------------------------
class Solution {
    int ans;

    private int root(int i, int[] parent) 
    {
        while (parent[i] != i) 
        {
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
    }
    public int union(int a, int b, int[] parent, int[] size) 
    {
        int ra = root(a, parent);
        int rb = root(b, parent);
        if (ra == rb)
            return size[ra] * size[ra];
            
        if (size[ra] < size[rb]) 
        {
            int temp = ra;
            ra = rb;
            rb = temp;

            temp = a;
            a = b;
            b = temp;
        }

        ans += size[ra] * size[rb];
        parent[rb] = ra;
        size[ra] += size[rb];

        return ans;
    }
    ArrayList<Integer> maximumWeight(int n, int edges[][], int q, int queries[]) {
        // code here 
        ans = 0;

        int[] parent = new int[n + 1];
        int[] size = new int[n + 1];

        for (int i = 0; i <= n; i++) 
        {
            parent[i] = i;
            size[i] = 1;
        }

        ArrayList<int[]> wt = new ArrayList<>();
        
        for (int i = 0; i < n - 1; i++)
            wt.add(new int[]{edges[i][2], edges[i][0], edges[i][1]});
            
        wt.sort((a, b) -> Integer.compare(a[0], b[0]));
        TreeMap<Integer, Integer> mp = new TreeMap<>();
        
        for (int i = 0; i < n - 1; i++) 
        {
            int a = wt.get(i)[0];
            int b = wt.get(i)[1];
            int c = wt.get(i)[2];
            mp.put(a, union(b, c, parent, size));
        }


        ArrayList<Integer> res = new ArrayList<>();
        
        for (int i = 0; i < q; i++) 
        {
            Map.Entry<Integer, Integer> val = mp.floorEntry(queries[i]);
            
            if (val == null)
                res.add(0);
            else
                res.add(val.getValue());
        }

        return res;
    }
}


