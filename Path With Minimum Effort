---------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------
You are a hiker preparing for an upcoming hike. You are given heights[][], a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). 
You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). 
You can move up, down, left, or right, and you wish to find the route with minimum effort.

Note: A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.
---------------------------------------------------------------------------------------------Example---------------------------------------------------------------------------------------------
Example 1:
Input:
row = 3
columns = 3 
heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 
2
Explaination: 
The route 1->3->5->3->5 has a maximum absolute difference of 2 in consecutive cells. This is better than the route 1->2->2->2->5, where the maximum absolute difference is 3.

Example 2:
Input:
row = 2
columns = 2 
heights = [[7,7],[7,7]]
Output: 
0
Explaination: 
Any route from the top-left cell to the bottom-right cell has a maximum absolute difference of 0 in consecutive cells.
---------------------------------------------------------------------------------------------Intution---------------------------------------------------------------------------------------------
Initialization:
A queue q is initialized to perform breadth-first search (BFS).
A 2D array vis is initialized to keep track of visited cells and their efforts. Initially, all cells are marked with maximum integer values.
BFS Exploration:
Starting from the top-left corner, the method explores adjacent cells in four directions: up, right, down, and left.
For each adjacent cell, it calculates the effort required to move to that cell. The effort is defined as the maximum of the current effort and the absolute height difference between the current cell and the adjacent cell.
If the calculated effort for the adjacent cell is less than the previously recorded effort, it updates the effort and adds the adjacent cell to the queue for further exploration.
Termination:
The BFS continues until the queue is empty, indicating that all reachable cells have been explored.
Finally, the method returns the minimum effort required to reach the bottom-right corner of the grid. If the bottom-right corner is unreachable, it returns 0.
---------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------
class Solution {
public static int MinimumEffort(int rows, int columns, int[][] heights) {
    // Initialize a queue to perform breadth-first search (BFS)
    Queue<int[]> q = new LinkedList<>();
    
    // Initialize a 2D array to keep track of visited cells and their efforts
    int vis[][] = new int[rows][columns];
    
    // Fill the visited array with maximum integer values initially
    for(int temp[] : vis) {
        Arrays.fill(temp, Integer.MAX_VALUE);
    }
    
    // Arrays to represent movements in four directions: up, right, down, left
    int x[] = {-1, 0, 1, 0};
    int y[] = {0, 1, 0, -1};
    
    // Initialize a temporary array to store current position and effort
    int temp[] = {0, 0, 0}; // {effort, row, column}
    
    // Add the starting position (top-left corner) to the queue with 0 effort
    q.add(temp);
    
    // Perform BFS
    while(q.size() != 0) {
        // Remove the front element of the queue
        temp = q.remove();
        int i = temp[1]; // current row
        int j = temp[2]; // current column
        int dis = temp[0]; // current effort
        
        // Explore all four possible directions from the current position
        for(int k = 0; k < 4; k++) {
            int newi = i + x[k]; // new row
            int newj = j + y[k]; // new column
            
            // Check if the new position is within the grid boundaries
            if(newi >= 0 && newi < rows && newj >= 0 && newj < columns) {
                // Calculate the new effort, which is the maximum of the current effort and the absolute height difference
                int newd = Math.max(dis, Math.abs(heights[newi][newj] - heights[i][j]));
                
                // If the new effort is less than the previously recorded effort for this position,
                // update the effort and add the new position to the queue
                if(newd < vis[newi][newj]) {
                    int newArray[] = {newd, newi, newj};
                    q.add(newArray);
                    vis[newi][newj] = newd;
                }
            }
        }
    }
    
    // Return the minimum effort required to reach the bottom-right corner,
    // or 0 if it is not reachable
    return vis[rows - 1][columns - 1] != Integer.MAX_VALUE ? vis[rows - 1][columns - 1] : 0;
}

}


