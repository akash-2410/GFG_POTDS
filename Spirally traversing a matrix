-----------------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------------------
You are given a rectangular matrix, and your task is to return an array while traversing the matrix in spiral form.
-----------------------------------------------------------------------------------------------------Example---------------------------------------------------------------------------------------------------------

Examples:

Input: matrix[][] = [[1, 2, 3, 4],
                  [5, 6, 7, 8],
                  [9, 10, 11, 12],
                  [13, 14, 15,16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]
Explanation:
https://www.geeksforgeeks.org/wp-content/uploads/spiral-matrix.png
Input: matrix[][] = [[1, 2, 3, 4],
                  [5, 6, 7, 8],
                  [9, 10, 11, 12]]
Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
Explanation: Applying same technique as shown above, output for the 2nd testcase will be 1 2 3 4 8 12 11 10 9 5 6 7.
-----------------------------------------------------------------------------------------------------Code------------------------------------------------------------------------------------------------------------
class Solution {
 public ArrayList<Integer> spirallyTraverse(int matrix[][]) {
    // Get the number of rows (n) and columns (m) in the matrix
    int n = matrix.length, m = matrix[0].length;
    // Calculate the total number of elements in the matrix
    int s = n * m;
    // Create an ArrayList to store the result of the spiral traversal
    ArrayList<Integer> ans = new ArrayList<>();
    
    // Initialize the boundaries of the matrix
    // a -> row start, b -> column start, c -> row end, d -> column end
    int a = 0, b = 0, c = n - 1, d = m - 1;
    
    // Continue the loop until the size of the result list is less than the total number of elements
    while(ans.size() < s) {
        // Traverse from left to right along the top row
        for(int i = b; i <= d && ans.size() < s; i++) {
            ans.add(matrix[a][i]);
        }
        a++; // Move the top boundary down
        
        // Traverse from top to bottom along the right column
        for(int i = a; i <= c && ans.size() < s; i++) {
            ans.add(matrix[i][d]);
        }
        d--; // Move the right boundary left
        
        // Traverse from right to left along the bottom row
        for(int i = d; i >= b && ans.size() < s; i--) {
            ans.add(matrix[c][i]);
        }
        c--; // Move the bottom boundary up
        
        // Traverse from bottom to top along the left column
        for(int i = c; i >= a && ans.size() < s; i--) {
            ans.add(matrix[i][b]);
        }
        b++; // Move the left boundary right
    }
    
    // Return the result of the spiral traversal
    return ans;
}

}
