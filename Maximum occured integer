-------------------------------------------------------------------------------------------Question-----------------------------------------------------------------------------------------------
Given n integer ranges, the task is to return the maximum occurring integer in the given ranges. If more than one such integer exists, return the smallest one.
The ranges are in two arrays l[] and r[].  l[i] consists of the starting point of the range and r[i] consists of the corresponding endpoint of the range & a maxx 
which is the maximum value of r[].

For example, consider the following ranges.
l[] = {2, 1, 3}, r[] = {5, 3, 9)
Ranges represented by the above arrays are.
[2, 5] = {2, 3, 4, 5}
[1, 3] = {1, 2, 3}
[3, 9] = {3, 4, 5, 6, 7, 8, 9}
The maximum occurred integer in these ranges is 3.
-------------------------------------------------------------------------------------------Example-----------------------------------------------------------------------------------------------
Input: n = 4, l[] = {1,4,3,1}, r[] = {15,8,5,4}, maxx = 15
Output: 4
Explanation: The given ranges are [1,15] [4, 8] [3, 5] [1, 4]. The smallest number that is most common or appears most times in the ranges is 4.

Input: n = 5, l[] = {1,5,9,13,21}, r[] = {15,8,12,20,30}, maxx = 30
Output: 5
Explanation: The given ranges are [1, 15] [5, 8] [9, 12] [13, 20] [21, 30]. The smallest number that is most common or appears most times in the ranges is 5.




-------------------------------------------------------------------------------------------Intution-----------------------------------------------------------------------------------------------
Approach
The solution uses a combination of range increment and prefix sum techniques to efficiently determine the frequency of each number in the given ranges.

Steps:
Range Increment and Decrement:

For each range [l[i], r[i]], increment the start of the range and decrement just after the end of the range.
This is done using an array where:
Incrementing the start index l[i] signifies the beginning of a range.
Decrementing the index r[i] + 1 signifies the end of a range.
Prefix Sum Calculation:

Calculate the prefix sum to transform the increment/decrement array into an array of actual counts.
This step ensures that each index in the array represents the total number of active ranges that include that index.
Finding the Maximum Occurrence:

Iterate through the prefix sum array to find the index with the highest value.
This index represents the smallest number that appears most frequently within the given ranges.
Detailed Explanation
Step 1: Range Increment and Decrement
We use an auxiliary array arr to keep track of the start and end of ranges.
For each range [l[i], r[i]]:
Increment arr[l[i]] to indicate the start of a range.
Decrement arr[r[i] + 1] to indicate the end of a range (by incrementing the position just after the end).
This helps in marking the start and end points without iterating through each element of the ranges, making the approach efficient.

Step 2: Prefix Sum Calculation
Compute the prefix sum of the array arr to get the actual number of ranges that include each index.
This transforms the array such that each position i in the array arr now holds the number of ranges that include i.
Step 3: Finding the Maximum Occurrence
Traverse through the prefix sum array to find the index with the maximum value.
The first occurrence of the maximum value will be the smallest number that appears the most times.



-------------------------------------------------------------------------------------------Code---------------------------------------------------------------------------------------------------
class Solution {

    public int maxOccured(int n, int[] l, int[] r, int maxx) {
        // Initialize an array to store the counts
        int[] arr = new int[maxx + 2]; // Create an array with extra space for 0 and maxx + 1

        // Increment the count at the start of the range and decrement after the end of the range
        for (int i = 0; i < n; i++) {
            arr[l[i]]++;            // Increment count at the start of the range
            arr[r[i] + 1]--;        // Decrement count after the end of the range
        }

        // Compute the prefix sum to get the number of occurrences
        int sum = 0;                // Initialize a variable to keep track of the sum
        for (int i = 0; i <= maxx; i++) {
            arr[i] += sum;          // Update arr[i] with the prefix sum
            sum = arr[i];           // Update sum for the next iteration
        }

        // Find the index with the maximum occurrences
        int ans = 0;                // Initialize the answer variable
        for (int i = 1; i <= maxx; i++) {
            if (arr[i] > arr[ans]) {
                ans = i;            // Update ans if a higher count is found
            }
        }

        return ans;                 // Return the index with the maximum occurrences
    }
}

