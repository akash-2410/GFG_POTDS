----------------------------------------------------------------------------------------------Question--------------------------------------------------------------------------------------------
There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.
You are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].
Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order
to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.
Return the time taken for the person at position k (0-indexed) to finish buying tickets.
----------------------------------------------------------------------------------------------Example--------------------------------------------------------------------------------------------
Example 1:
Input: tickets = [2,3,2], k = 2
Output: 6
Explanation: 
- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].
- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].
The person at position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.

Example 2:
Input: tickets = [5,1,1,1], k = 0
Output: 8
Explanation:
- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].
- In the next 4 passes, only the person in position 0 is buying tickets.
The person at position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.
----------------------------------------------------------------------------------------------Intution with code--------------------------------------------------------------------------------
class Solution {
    public int timeRequiredToBuy(int[] tickets, int k) {
        // Get the number of tickets available.
        int n = tickets.length;
        
        // Get the number of tickets required at the kth position.
        int x = tickets[k];
        
        // Initialize the variable to store the total time required.
        int time = 0;
        
        // Iterate through each position to calculate the total time required to buy tickets.
        for (int i = 0; i < n; i++) {
            // Calculate the number of tickets to buy at the current position.
            // If the current position is after the kth position, one less ticket is needed,
            // otherwise, the required number of tickets remains the same.
            int buy = (i > k) ? x - 1 : x;
            
            // Add the minimum of required tickets and available tickets at the current position to the total time.
            time += Math.min(buy, tickets[i]);
        }
        
        // Return the total time required to buy tickets.
        return time;
    }
}
