--------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------
Given an array of size n and a range [a, b]. The task is to partition the array around the range such that the array is divided into three parts.
1) All elements smaller than a come first.
2) All elements in range a to b come next.
3) All elements greater than b appear in the end.
The individual elements of three sets can appear in any order. You are required to return the modified array.

Note: The generated output is 1 if you modify the given array successfully.

Geeky Challenge: Solve this problem in O(n) time complexity.
--------------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------------
Example 1:
Input: 
n = 5
array[] = {1, 2, 3, 3, 4}
[a, b] = [1, 2]
Output: 
1
Explanation: 
One possible arrangement is: {1, 2, 3, 3, 4}. If you return a valid arrangement, output will be 1.

Example 2:
Input: 
n = 6 
array[] = {1, 4, 3, 6, 2, 1}
[a, b] = [1, 3]
Output: 
1
Explanation: 
One possible arrangement is: {1, 3, 2, 1, 4, 6}. If you return a valid arrangement, output will be 1.
--------------------------------------------------------------------------------------------Intution----------------------------------------------------------------------------------------------
Initialization: Initialize three pointers i, j, and k at the beginning, j at the start of the array (position 0), i at the start as well, and k at the end of the array (position array.length - 1).
Partitioning:
Traverse the array from the beginning to the end using the i pointer.
If the current element (array[i]) is less than a, it means it should be in the first partition. Swap array[i] with array[j], and move both i and j pointers to the right.
If the current element (array[i]) is greater than b, it means it should be in the third partition. Swap array[i] with array[k], and move only k pointer to the left.
If the current element is within the range [a, b], leave it where it is and move i to the right.
Termination Condition:
Continue this process until i is less than or equal to k. This ensures that the entire array has been traversed.
Final Result:
After the loop terminates, the array is partitioned into three parts:
Elements less than a are before index j.
Elements within the range [a, b] are between indexes j and i (inclusive).
Elements greater than b are after index k.
--------------------------------------------------------------------------------------------Code-------------------------------------------------------------------------------------------------
class Solution{
    //Function to partition the array around the range such 
    //that array is divided into three parts.
    public void threeWayPartition(int array[], int a, int b)
    {
        // code here 
       int j=0,k=array.length-1,i=0;
        while(i<=k){
            if(array[i]<a){
                int temp = array[i];
                array[i]=array[j];
                array[j]=temp;
                j++;
                i++;
            }
            else if(array[i]>b){
                int temp = array[i];
                array[i]=array[k];
                array[k]=temp;
                k--;
            }
            else i++;
    }
}
}
