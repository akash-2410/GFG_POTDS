-------------------------------------------------------------------------------------------------------Question-----------------------------------------------------------------------------------------------------
Given a sequence of matrices, find the most efficient way to multiply these matrices together. The efficient way is the one that involves the least number of multiplications.

The dimensions of the matrices are given in an array arr[] of size N (such that N = number of matrices + 1) where the ith matrix has the dimensions (arr[i-1] x arr[i]).
-------------------------------------------------------------------------------------------------------Example-----------------------------------------------------------------------------------------------------
Example 1:
Input: N = 5
arr = {40, 20, 30, 10, 30}
Output: 26000
Explanation: There are 4 matrices of dimension 
40x20, 20x30, 30x10, 10x30. Say the matrices are 
named as A, B, C, D. Out of all possible combinations,
the most efficient way is (A*(B*C))*D. 
The number of operations are -
20*30*10 + 40*20*10 + 40*10*30 = 26000.
--------------------------------------------------------------------------------------Approach 1 ------------------------------------------------------------------------------------------------------------------
//USing Recurrsion(TLE)
class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        // code here
         return solver(arr,1,N-1);
    } 
        
        
        static int solver(int arr[],int i,int j){
      
        if(i==j)
            return 0;
        
        int min=Integer.MAX_VALUE;
        
        for(int k=i;k<j;k++){
             int tempans=solver(arr,i,k)
                         +solver(arr,k+1,j)
                         +arr[i-1]*arr[k]*arr[j];
             
            if(tempans<min)
                min=tempans;
        
    }
        
        return min;
    }
}
--------------------------------------------------------------------------------------Approach 2 ------------------------------------------------------------------------------------------------------------------
 //Recurrsion + Memoization (TLE)
class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        return solver(arr,1,N-1);
    }
    private static int solver(int arr[],int i,int j){
        int n=arr.length;
        int dp[][] =new int[n+1][n+1];
        for (int[] row : dp) 
         Arrays.fill(row, -1); 
        if(i==j){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        dp[i][j]=Integer.MAX_VALUE;
        for(int k=i;k<j;k++){
            dp[i][j]=Math.min(dp[i][j],solver(arr,i,k)+solver(arr,k+1,j)+arr[i-1]*arr[k]*arr[j]);
        }
        return dp[i][j];
    }
}
--------------------------------------------------------------------------------------Approach 3 ------------------------------------------------------------------------------------------------------------------
3rd Approach by iterating in both directions
 class Solution {
In the first iteration of the outer loop, where i is initialized to N-1 and decrements to 1, 
 the inner loop iterates from i+1 to N-1. This corresponds to multiplying matrices from right to left.

In the second iteration of the outer loop, where i is initialized to 1 and increments to N-1, 
the inner loop iterates from i to j-1. This corresponds to multiplying matrices from left to right.

By performing the matrix multiplication in both directions, 
the algorithm is able to find the optimal solution that minimizes the number of multiplications required. 
This is because the order of multiplication can affect the number of multiplications needed.



    int[][] memo = new int[105][105];
  
   /*this is s a helper method that calculates the minimum number of multiplications needed to multiply
   a subsequence of matrices from index i to j in the given array arr.
   It uses memoization to store the results of subproblems and avoid redundant calculations.
   
    int matrixMultiplication(int i, int j, int[] arr) {
        if (memo[i][j] != 0) {
            return memo[i][j];
        }
        if (i == j) {
            return memo[i][j] = 0;
        }
        int result = Integer.MAX_VALUE;
        for (int k = i; k < j; k++) {
            result = Math.min(result, arr[i - 1] * arr[k] * arr[j] + matrixMultiplication(i, k, arr) + matrixMultiplication(k + 1, j, arr));
        }
        return memo[i][j] = result;
    }

/*This is the main method that solves the problem. It initializes a 2D array memo to store the results of subproblems.
It then iterates over the array in reverse order, calculating the minimum number of multiplications 
needed to multiply a subsequence of matrices from index i to j for all possible values of i and j. 
The result is stored in memo[1][N - 1]

    public int matrixMultiplication(int N, int arr[]) {
        for (int i = 0; i < 105; i++) {
            Arrays.fill(memo[i], 0);
        }
        for (int i = N - 1; i >= 1; i--) {
            for (int j = i + 1; j < N; j++) {
                int result = Integer.MAX_VALUE;
                for (int k = i; k < j; k++) {
                    result = Math.min(result, arr[i - 1] * arr[k] * arr[j] + memo[i][k] + memo[k + 1][j]);
                }
                memo[i][j] = result;
            }
        }
        return memo[1][N - 1];
    }
}
--------------------------------------------------------------------------------------Approach 4------------------------------------------------------------------------------------------------------------------

class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        // code here
        int[][] dp=new int[N][N];
        for(int i=0;i<N-1;i++)
        {
            dp[i][i+1]=0;
        }
        
        for(int gap=2;gap<N;gap++)
        {
            for(int i=0;i+gap<N;i++)
            {
                int j=i+gap;
                dp[i][j]=Integer.MAX_VALUE;
                for(int k=i+1;k<j;k++)
                {
                    dp[i][j]=Math.min(dp[i][j],dp[i][k]+dp[k][j]+(arr[i]*arr[j]*arr[k]));
                }
            }
        }
        
        return dp[0][N-1];
    }
}

