------------------------------------------------------------------------------------------------Question------------------------------------------------------------------------------------------------------------
Consider the generalized Fibonacci number g, which is dependent on a, b and c as follows :-
g(1) = 1, g(2) = 1. For any other number n, g(n) = a*g(n-1) + b*g(n-2) + c.

For a given value of m, determine g(n)%m.

------------------------------------------------------------------------------------------------Example------------------------------------------------------------------------------------------------------------
Example 1:
Input:
a = 3
b = 3
c = 3
n = 3
m = 5
Output:
4
Explanation:
g(1) = 1 and g(2) = 1 
g(3) = 3*g(2) + 3*g(1) + 3 = 3*1 + 3*1 + 3 = 9
We need to return answer modulo 5, so 9%5 = 4, is the answer.
------------------------------------------------------------------------------------------------Explanation-----------------------------------------------------------------------------------------------------------
The f function is a recursive function that calculates the nth term of a sequence defined by the given parameters a, b, and c. The formula used to calculate the nth term is:

x_n = (a * y_(n-1) + b * x_(n-1) + c) % m

where x_n and y_n are the nth and (n-1)th terms of the sequence, respectively.

The genFibNum function is an alternative approach to calculate the nth term of the sequence. It uses matrix exponentiation to efficiently calculate the nth term.

The multiply function is a helper function that multiplies two matrices modulo m. It takes two matrices A and B and the modulo value m as input.

The multiply function initializes a new matrix result with the same size as the input matrices A and B.

The nested loops iterate over each element of the result matrix. For each element, it calculates the sum of the corresponding elements from the two input matrices A and B, 
multiplied by the corresponding element from the other matrix. The result is then taken modulo m to keep the result within the specified range.

The genFibNum function performs the matrix exponentiation. It initializes two matrices mat and res representing the initial state of the sequence and the identity matrix, respectively.
It then iterates over the bits of n from the least significant bit to the most significant bit. If the current bit of n is 1, it multiplies the result matrix by the mat matrix. 
After that, it squares the mat matrix. This process is repeated until all bits of n have been processed.

Finally, the genFibNum function returns the nth term of the sequence, calculated using the matrix exponentiation approach.

------------------------------------------------------------------------------------------------Code--------------------------------------------------------------------------------------------------------------
class Solution {
    static long f(Long a, Long b, Long c, long n, long m){
        // long dp[] = new long[(int)(n+1)];
        
        if(n == 1 || n == 2){
            return 1;
        }
        
        // dp[1] = 1;
        // dp[2] = 1;
        long x=1;
        long y=1;
        
        for(int i = 3; i <= n; i++){
            long p=x;
            x=((a * y % m) + (b * x % m) + c % m) % m;
            y=p;
        }
        
        return x;
    }
    
    static long genFibNum(Long a, Long b, Long c, long n, long m) {
        // return f(a, b, c, n, m);
        
         if (n <= 2) {
            return 1 % m;
        }
        long[][] mat = {
                {a, b, 1},
                {1, 0, 0},
                {0, 0, 1}
        };
        long[][] res = {
                {1, 0, 0},
                {0, 1, 0},
                {0, 0, 1}
        };
        n -= 2;
        while (n > 0) {
            if ((n & 1) == 1) {
                res = multiply(res, mat, m);
            }
            mat = multiply(mat, mat, m);
            n >>= 1;
        }
        return (res[0][0] + res[0][1] + c * res[0][2]) % m;
    }
    static long[][] multiply(long[][] A, long[][] B, long m) {
        int size = A.length;
        long[][] result = new long[size][size];
        for (int i = 0; i < size; ++i) {
            for (int j = 0; j < size; ++j) {
                long sum = 0;
                for (int k = 0; k < size; ++k) {
                    sum += A[i][k] * B[k][j];
                    sum %= m;
                }
                result[i][j] = sum;
            }
        }
        return result;
    
    }
}
