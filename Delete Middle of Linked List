----------------------------------------------------------------------------------------Question--------------------------------------------------------------------------------------------------
Given a singly linked list, delete middle of the linked list. For example, if given linked list is 1->2->3->4->5 then linked list should be modified to 1->2->4->5.
If there are even nodes, then there would be two middle nodes, we need to delete the second middle element. 
For example, if given linked list is 1->2->3->4->5->6 then it should be modified to 1->2->3->5->6.
If the input linked list has single node, then it should return NULL.
----------------------------------------------------------------------------------------Example--------------------------------------------------------------------------------------------------
Example 1:
Input:
LinkedList: 1->2->3->4->5
Output: 
1 2 4 5

Example 2:
Input:
LinkedList: 2->4->6->7->5->1
Output: 
2 4 6 5 1
----------------------------------------------------------------------------------------Intution--------------------------------------------------------------------------------------------------
Initialization: Two pointers, slow and fast, both initially pointing to the head of the linked list.
Base Case Check: It checks if fast.next is null. If it is, it means there's only one node in the list, so returning null would indicate an empty list.
Traversal: It advances fast two steps ahead (fast = fast.next.next) and slow one step ahead (slow = slow.next) in each iteration.
This ensures that slow reaches the middle node when fast reaches the end of the list.
Deleting the Middle Node: Once fast reaches the end, slow would be pointing to the middle node. The code then updates slow.next to skip the middle node and point directly to the next node, 
effectively removing the middle node from the list.
Returning the Head: Finally, it returns the head of the updated linked list after the deletion.
----------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------------
class Solution {
    Node deleteMid(Node head) {
       Node slow = head;
       Node fast = head;
        
        if(fast.next == null){
            return null;
        }
        while(fast.next.next!= null && fast.next.next.next!= null){
            slow = slow.next;
            fast = fast.next.next;
        }
        slow.next = slow.next.next;
        return head;
    }
}
