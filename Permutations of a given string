 List<String> result = new ArrayList<>();
        char[] arr = S.toCharArray();
        Arrays.sort(arr); // Sort the characters of the string
        
        // Create a boolean array to keep track of visited characters
        boolean[] visited = new boolean[arr.length];
        StringBuilder sb = new StringBuilder();
        
        // Generate permutations using backtracking
        generatePermutations(arr, visited, sb, result);
        
        return result;
    }
    
    private void generatePermutations(char[] arr, boolean[] visited, StringBuilder sb, List<String> result) {
        if (sb.length() == arr.length) {
            result.add(sb.toString()); // Add the current permutation to the result
            return;
        }
        
        for (int i = 0; i < arr.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                sb.append(arr[i]);
                
                generatePermutations(arr, visited, sb, result);
                
                // Backtrack
                sb.deleteCharAt(sb.length() - 1);
                visited[i] = false;
                
                // Skip duplicate characters
                while (i + 1 < arr.length && arr[i] == arr[i + 1])
                    i++;
            }
        }
    }
