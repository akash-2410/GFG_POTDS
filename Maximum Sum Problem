---------------------------------------------------------------------------------------------------Question-----------------------------------------------------------------------------------------------------------
A number n can be broken into three parts n/2, n/3, and n/4 (consider only the integer part). 
Each number obtained in this process can be divided further recursively. Find the maximum sum that can be obtained by summing up the divided parts together.
Note: It is possible that we don't divide the number at all.
---------------------------------------------------------------------------------------------------Example-----------------------------------------------------------------------------------------------------------
Input:
n = 24
Output: 
27
Explanation: 
Break n = 24 in three parts {24/2, 24/3, 24/4} = {12, 8, 6}, now current sum is = (12 + 8 + 6) = 26 . But recursively breaking 12 would produce value 13. So our maximum sum is 13 + 8 + 6 = 27.

---------------------------------------------------------------------------------------------------Code --------------------------------------------------------------------------------------------------------------
class Solution
{
    public int maxSum(int n) 
    { 
      
        int sum =0;
        if(n==0) return 0;
        //These lines call the maxSum method recursively with n/2, n/3, and n/4 as the input. The results are stored in the variables s1, s2, and s3, respectively.
        int s1 = maxSum(n/2);
        int s2 = maxSum(n/3);
        int s3 = maxSum(n/4);
        
        sum = Math.max(n,s1+s2+s3);
        
        return sum;
    } 
} 




