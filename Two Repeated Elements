------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------
You are given an integer n and an integer array arr of size n+2. All elements of the array are in the range from 1 to n. 
Also, all elements occur once except two numbers which occur twice. Find the two repeating numbers.
Note: Return the numbers in their order of appearing twice. So, if X and Y are the repeating numbers, and X's second appearance comes before second appearance of Y, 
then the order should be (X, Y).
------------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------------
Example 1:
Input:
n = 4
arr[] = {1,2,1,3,4,3}
Output: 
1 3
Explanation: 
In the given array, 1 and 3 are repeated two times and as 1's second appearance occurs before 2's second appearance, so the output should be 1 3.

Example 2:
Input:
n = 2
arr[] = {1,2,2,1}
Output: 
2 1
Explanation: 
In the given array, 1 and 2 are repeated two times and second occurence of 2 comes before 1. So the output is 2 1.
------------------------------------------------------------------------------------------Intution----------------------------------------------------------------------------------------------
Array Initialization: The function initializes an array ans of size 2 to store the two repeated elements.
Loop Through Array: It iterates over the input array arr using a for loop. The loop goes up to n + 2, where n is the length of the input array.
The +2 suggests that there are two repeated elements, so the loop needs to iterate beyond the length of the array to find them.
Absolute Value: Within the loop, it takes the absolute value of the element at index i using Math.abs(arr[i]).
This is done to handle negative numbers since the approach relies on changing the sign of elements.
Changing Sign: It checks if the element at index ind (the absolute value) is positive. If it's positive, 
it changes the sign of the element at index ind to negative by setting arr[ind] = -arr[ind]. This signifies that this element has been encountered once.
Checking Existing Negativity: If the element at index ind is already negative, it implies that this element has been encountered before. In this case,
it checks whether the first element of the result array ans is 0. If it's 0, it means this is the first repeated element found, so it assigns ind to ans[0].
If ans[0] is not 0, it means the first repeated element has already been found, so it assigns ind to ans[1], indicating the second repeated element.
Breaking Out of the Loop: After finding both repeated elements, the loop breaks as there's no need to continue iterating.
Returning Result: Finally, it returns the array ans containing the two repeated elements.
------------------------------------------------------------------------------------------Code------------------------------------------------------------------------------------------------
class Solution
{
    //Function to find two repeated elements.
    public int[] twoRepeated(int arr[], int n){
         int[] ans = new int[2]; // Creating an array to store the result
        for (int i = 0; i < n + 2; i++) { // Loop through the array
            int ind = Math.abs(arr[i]); // Taking the absolute value of the element at index i
            if (arr[ind] > 0) { // If the element at index 'ind' is positive
                arr[ind] = -arr[ind]; // Change its sign to negative
            } else { // If the element at index 'ind' is already negative
                if (ans[0] == 0) { // If the first element of the result array is 0
                    ans[0] = ind; // Assign 'ind' to the first element of the result array
                } else { // If the first element of the result array is not 0
                    ans[1] = ind; // Assign 'ind' to the second element of the result array
                    break; // Break the loop as we have found both repeated elements
                }
            }
        }
        return ans; // Return the array containing the repeated elements
    }
    
}   
