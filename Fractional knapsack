class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        // Your code here
           Arrays.sort(arr,new Comparator<Item>(){ //for sorting Arrays accroding to weight
            public int compare(Item a,Item b){
                if((double)a.value/a.weight<(double)b.value/b.weight)return -1;
                else if((double)a.value/a.weight>(double)b.value/b.weight)return 1;
                return 0;
            }
        });
        double ans = 0;
        for(int i=n-1;i>=0;i--){ //start traversing from last
            if(W>=arr[i].weight){ //if W given is > = the value in weights arrays then 
                ans+=arr[i].value; // add it to ans
                W-=arr[i].weight; //and subtract that weight from total weight
            }
            else{
                double oneUnit = (double)arr[i].value/arr[i].weight; // if W becomes <= value of weight arr then add the percentage of it which is suitable i.e. if (120/30)*weight lwft niow is 20 so multiply with this 
                ans+=(double)oneUnit*W;
                return ans;
            }
        }
        return ans;
    }
}
