----------------------------------------------------------------------------------------------------------Questiion--------------------------------------------------------------------------------------------------
Given an array integers arr[], containing n elements, find the sum of bit differences between all pairs of element in the array.
Bit difference of a pair (x, y) is the count of different bits at the same positions in binary representations of x and y.
For example, bit difference for 2 and 7 is 2. Binary representation of 2 is 010 and 7 is 111 respectively and the first and last bits differ between the two numbers.

Note: (x, y) and (y, x) are considered two separate pairs.
----------------------------------------------------------------------------------------------------------Example--------------------------------------------------------------------------------------------------
Input:
n = 3 
arr[] = {1, 3, 5}
Output: 8
Explanation: 
All possible pairs of an array are (1, 1), (1, 3), (1, 5), (3, 1), (3, 3) (3, 5),(5, 1), (5, 3), (5, 5).
Sum of bit differences = 0 + 1 + 1 + 1 + 0 + 2 + 1 + 2 + 0 = 8             
----------------------------------------------------------------------------------------------------------Intution--------------------------------------------------------------------------------------------------
Initialize two variables zero and one to 0 to keep track of the number of elements with 0 and 1 at the current bit position, respectively.
Initialize a variable ans to 0 to keep track of the total sum of bit differences.
For each bit position from 0 to 20, do the following: a. Set num to 2^bit position. b. For each element in the array, do the following:
Check if the current bit of the element is 0 or 1 using the bitwise AND operator with num.
If the bit is 0, increment zero.
If the bit is 1, increment one. c. 
Calculate the number of pairs of elements with different bits at the current position by multiplying zero and one and multiply the result by 2 to account
for the fact that each pair is counted twice (once for each element in the pair). d. Add the calculated number of bit differences to ans. e. Reset zero and one to 0 for the next bit position.
Return ans as the total sum of bit differences.
The code calculates the bit difference for all pairs of elements by first initializing two variables zero and one to 0. For each bit position, 
it counts the number of elements that have 0 and 1 at that bit position, respectively. The product of these two counts is the number of pairs of elements that have different bits at that position. 
The code then adds this product to the total sum of bit differences.

The outer loop in the code runs from 0 to 20, as the maximum number of bits in an integer is 32 and we are only interested in the first 20 bits. For each bit position,
the inner loop runs through the array and counts the number of elements that have 0 and 1 at that position. The product of these two counts is then added to the total sum of bit differences.

The variable num is used to keep track of the current bit position. It is shifted left by 1 bit for each iteration of the outer loop.

The time complexity of this solution is O(n * 20), where n is the length of the array. The space complexity is O(1), as we are using a constant amount of space to store the variables.

----------------------------------------------------------------------------------------------------------Code------------------------------------------------------------------------------------------------------

class Solution {
    long sumBitDifferences(int[] arr, int n) {
        long num = 1, ans = 0;
        for (int i = 0; i < 21; i++) { // loop for traversing through the bits of 20bit length
            int nopairsame = 0, pairsame = 0;
            for (int j = 0; j < n; j++) {
                if ((arr[j] & num) != 0) {
                    pairsame++;
                } else {
                    nopairsame++;
                }
            }
            ans += (long) pairsame * nopairsame * 2;
            num <<= 1;
        }
        return ans;
    }
}

