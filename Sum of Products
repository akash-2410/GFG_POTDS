---------------------------------------------------------------------------------------Question--------------------------------------------------------------------------------------------------
Given an array arr[] of size n. Calculate the sum of Bitwise ANDs ie: calculate sum of arr[i] & arr[j] for all the pairs in the given array arr[] where i < j.

---------------------------------------------------------------------------------------Example--------------------------------------------------------------------------------------------------
Example 1:
Input:
n = 3
arr = {5, 10, 15}
Output:
15
Explanation:
The bitwise Ands of all pairs where i<j are (5&10) = 0, (5&15) = 5 and (10&15) = 10.
Therefore, the total sum = (0+5+10) = 15.
---------------------------------------------------------------------------------------Intution--------------------------------------------------------------------------------------------------
Counting Set Bits:
The function starts by going through each number in the array and counting the number of set bits (bits with value 1) 
at each position from the least significant bit to the most significant bit.
For example, if we have the numbers 5 (binary: 101) and 3 (binary: 011), at the first position (least significant bit), there are two set bits

Calculating Pairs:
Once we have the counts of set bits at each position, we can calculate the number of pairs that can be formed.
For any bit position, if there are 'n' set bits, we can choose any two of them to form a pair. 
The number of ways to choose two set bits out of 'n' is given by the combination formula (n * (n + 1)) / 2.
For example, if at a certain bit position, there are 3 set bits, we can form 3 choose 2 = 3 pairs.

Summing Pairs:
After calculating the number of pairs for each bit position, we multiply this count by 2 raised to the power of the bit position.
This multiplication essentially considers the contribution of each bit position to the final sum. The weight of each bit position is determined by its position in the binary representation.
For example, if we have pairs formed at the second bit position, their contribution to the final sum is greater than pairs formed at the first bit position, and so on.
---------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------------
class Solution {
 static long pairAndSum(int n, long arr[]) {
    // Create an array to store the count of set bits at each position
    int bits[] = new int[32];
    // Initialize the array with zeros
    Arrays.fill(bits, 0);
    
    // Iterate through each element in the array
    for(int i = 0; i < n; i++) {
        long temp = arr[i];
        int j = 0;
        // Count the number of set bits in the binary representation of the current element
        while(temp != 0) {
            if((temp & 1) == 1) // Check if the least significant bit is set
                bits[j]++; // Increment the count of set bits at position j
            temp >>= 1; // Right shift to check the next bit
            j++; // Move to the next bit position
        }
    }
    
    // Initialize the sum of pairs to 0
    long ans = 0;
    // Iterate through each bit position
    for(int i = 0; i < 32; i++) {
        long temp = bits[i];
        temp--; // Decrement the count by 1 (excluding the case where both bits are 1)
        // Calculate the number of pairs that can be formed using the current bit position
        long pairs = (temp * (temp + 1)) / 2;
        // Multiply the pairs by 2 raised to the power of the current bit position
        ans += (pairs * (long)Math.pow(2, i));
    }
    
    // Return the total sum of pairs
    return ans;
}

}
