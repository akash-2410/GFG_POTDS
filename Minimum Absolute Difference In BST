---------------------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------------
Given a binary search tree having n (n>1) nodes, the task is to find the minimum absolute difference between any two nodes.
---------------------------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------------------
Example 1:
Input:
Input tree
https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/712351/Web/Other/blobid2_1709058082.png
Output:
10
Explanation:
There are no two nodes whose absolute difference in smaller than 10.
---------------------------------------------------------------------------------------------------------Intution----------------------------------------------------------------------------------------------------
Binary Search Tree (BST): In a BST, each node has a value, and for every node:
All nodes in the left subtree have values less than the node's value.
All nodes in the right subtree have values greater than the node's value.
This property of a BST helps us to efficiently traverse the tree and compare node values.

Inorder Traversal: Inorder traversal of a BST visits the nodes in ascending order. This property of inorder traversal makes it suitable for finding the minimum absolute difference between adjacent nodes.

Finding Minimum Difference: During the inorder traversal, as we visit each node, we compare its value with the value of the previously visited node.
We compute the absolute difference between these values and update the minimum difference found so far.
Since we are traversing in ascending order, the minimum absolute difference will be between adjacent nodes that are closest to each other.

Track Previous Node: To compare adjacent nodes, we need to keep track of the previously visited node. We use a variable prev to store this information.
Initially, prev is set to null.
As we traverse the tree, prev gets updated with the current node each time we move to the next node.

Updating Minimum Difference: At each step, we compute the absolute difference between the current node's value and the value of the previous node. 
If this difference is less than the current minimum difference, we update minDiff with this new value.

Returning Minimum Difference: After traversing the entire tree, the minDiff variable holds the minimum absolute difference between any two nodes in the BST.
---------------------------------------------------------------------------------------------------------Code-------------------------------------------------------------------------------------------------------
class Solution
{
    int minDiff = Integer.MAX_VALUE;
    Node prev;

    public void inOrder(Node root) {
        if (root == null)
            return;

        inOrder(root.left);

         if (prev != null) {
            minDiff = Math.min(minDiff, Math.abs(root.data - prev.data));
        }

        prev = root;

        inOrder(root.right);
    }
    
    
    int absolute_diff(Node root)
    {
        //Your code here
         prev = null;
        inOrder(root);
        return minDiff;
    }
}
