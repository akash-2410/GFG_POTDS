-----------------------------------------------------------------------------------------Question------------------------------------------------------------------------------------------------
Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions

serialize() : stores the tree into an array a and returns the array.
deSerialize() : deserializes the array to the tree and returns the root of the tree.
Note: Multiple nodes can have the same data and the node values are always positive integers. 
Your code will be correct if the tree returned by deSerialize(serialize(input_tree)) is same as the input tree.
Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).
-----------------------------------------------------------------------------------------Example------------------------------------------------------------------------------------------------
Example 1:
Input:
      1
    /   \
   2     3
Output: 
2 1 3

Example 2:
Input:
         10
       /    \
      20    30
    /   \
   40  60
Output: 
40 20 60 10 30
-----------------------------------------------------------------------------------------Intution------------------------------------------------------------------------------------------------
preOrder: This method performs a pre-order traversal of the binary tree starting from the given root node. During the traversal, it appends the values of nodes to an ArrayList named ans. 
If a node is null, it adds -1 to the list.
create: This method is used for deserialization. It recursively constructs a binary tree from the serialized ArrayList. 
It uses a static variable idx to keep track of the index of the current element being processed in the ArrayList.
It creates a new node for each non-null value encountered in the ArrayList and recursively constructs its left and right children.
serialize: This method takes the root of a binary tree as input and returns an ArrayList containing the serialized representation of the tree.
It simply calls the preOrder method to perform a pre-order traversal and populate the ArrayList with node values.
deSerialize: This method takes an ArrayList A (presumably containing a serialized binary tree) as input and returns the root node of the deserialized tree. 
It initializes the static variable idx to -1 and then calls the create method to recursively construct the tree from the serialized ArrayList.
-----------------------------------------------------------------------------------------Code--------------------------------------------------------------------------------------------------

class Tree {
    static int idx;
    public static void preOrder(Node root,ArrayList<Integer> ans){
        if(root==null){
            ans.add(-1);
            return;
        }
        ans.add(root.data);
        preOrder(root.left,ans);
        preOrder(root.right,ans);
    }
    public static Node create(ArrayList<Integer> ans){
        idx++;
        if(ans.get(idx)==-1){
            return null;
        }
        Node newNode = new Node(ans.get(idx));
        newNode.left = create(ans);
        newNode.right = create(ans);
        return newNode;
    }
    public ArrayList<Integer> serialize(Node root) {
        ArrayList<Integer> a = new ArrayList<>();
        preOrder(root,a);
        return a;
    }

    public Node deSerialize(ArrayList<Integer> A) {
        idx = -1;
        Node root = create(A);
        return root;
    }
};


