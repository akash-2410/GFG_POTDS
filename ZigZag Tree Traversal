---------------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------------------
Given a binary tree with n nodes. Find the zig-zag level order traversal of the binary tree.
---------------------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------------------------
Example 1:
Input:
        1
      /   \
     2    3
    / \    /   \
   4   5 6   7
Output:
1 3 2 4 5 6 7
---------------------------------------------------------------------------------------------------Code------------------------------------------------------------------------------------------------------------

class GFG
{
    //Function to store the zig zag order traversal of tree in a list.
	ArrayList<Integer> zigZagTraversal(Node root)
	{
	    // List to store the traversal result
	    ArrayList<ArrayList<Integer>> traversal = new ArrayList<>();
	    
	     // Queue for level order traversal
	    Queue<Node> q =new LinkedList<>();
	    
	    // Add the root node to the queue
	    q.add(root);
	    
	     // Perform level order traversal
	    while(!q.isEmpty()){
	        // Get the number of nodes at the current level
	        int n=q.size();
	          // List to store nodes at the current level
            ArrayList<Integer> level = new ArrayList<>();
            
            // Process nodes at the current level
            for(int i=0;i<n;i++){
                // Remove the front node from the queue
                Node node =q.poll();
                 // Add the node's value to the current level list
                level.add(node.data);
                
                // Add the left child to the queue if it exists
                if(node.left!=null){
                    q.add(node.left);
                }
                // Add the right child to the queue if it exists
                if(node.right!=null){
                    q.add(node.right);
                }
            }
            // Add the current level list to the traversal list
            traversal.add(level);
	    }
	         // List to store the final zigzag traversal result
             ArrayList<Integer> ans = new ArrayList<>();
             
            // Iterate through each level of the traversal
            
           for (int i = 0; i < traversal.size(); i++) {
               
            // Reverse the order of nodes for odd levels (zigzag)
            
            if (i % 2 == 1) {
                Collections.reverse(traversal.get(i));
            }
            
            // Add nodes of the current level to the final result list
            for (int num : traversal.get(i)) {
                ans.add(num);
            }
        }

        // Return the final zigzag traversal result
        return ans;
    }
}
