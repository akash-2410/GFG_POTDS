Given a Binary Tree of n nodes, find all the nodes that don't have any siblings. You need to return a list of integers containing all the nodes that don't have a sibling in sorted order (Increasing).

Two nodes are said to be siblings if they are present at the same level, and their parents are the same.

Note: The root node can not have a sibling so it cannot be included in our answer.




Code:
class Tree
{
  void help(Node root,ArrayList<Integer> ans){
        if(root==null)return;
        if(root.left==null || root.right==null){
            if(root.left!=null)ans.add(root.left.data);
            if(root.right!=null)ans.add(root.right.data);
        }
        help(root.left,ans);
        help(root.right,ans);
    }
    ArrayList<Integer> noSibling(Node node)
    {
        // code here
        ArrayList<Integer> ans = new ArrayList<>();
        help(node,ans);
        Collections.sort(ans);
        if(ans.size()==0)ans.add(-1);
        return ans;
    }

}
