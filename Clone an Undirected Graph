------------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------------------
Given a connected undirected graph with n nodes and m edges, with each node having a distinct label from 0 to n-1, create a clone of the graph. 
Each node in the graph contains an integer val and an array (neighbors) of nodes,containing nodes that are adjacent to the current node.
Note: If the user returns a correct copy of the given graph, then the system will print 1; in the case when an incorrect copy is generated or when the user returns the original node, the system will print 0.

------------------------------------------------------------------------------------------------Example------------------------------------------------------------------------------------------------------------
For Example :    
class Node {
    val: integer
    neighbors: List[Node]
}

Example 1:
Input:
adjList = 
{
    {1, 3},
    {0, 2},
    {1, 3},
    {0, 2}
}
Output: 1
Explanation:
1 is the output that the driver code will print in case 
you successfully cloned the given graph.

------------------------------------------------------------------------------------------------Code With Explanation---------------------------------------------------------------------------------------------

class Solution{
    
    
  void DFS(Node node, Node clone_node, HashMap<Node, Node> store) {
        for (Node n : node.neighbors) {//traverse through each neighbors
        
           /* if the node is not cloned yet thenc clone it and and that cloneed node  to map 
           then connect the prev cloned node to this neighbor cloned node*/  
        
            if (!store.containsKey(n)) {
                Node clone = new Node(n.val);
                store.put(n, clone);
                clone_node.neighbors.add(clone);
                
                DFS(n, clone, store); // go on recursively
                
            } 
            // if already cloned or present in map then only add to its neighbor 
            else {
                clone_node.neighbors.add(store.get(n));
            }
        }
    }
    
    Node cloneGraph(Node node){
        if(node == null) return null;
        
        //first the clone the given node itself
        Node clone_node = new Node(node.val);
        
        //Now,Clone its neighbours and recursively thier neighbours
        /* but if a node reappears, then we need to access that cloned node
        so,store them in a map<Node*,Node*>
        */
        HashMap<Node,Node> store=new HashMap<>();
        store.put(node,clone_node);
        
        DFS(node,clone_node,store);
        
        return clone_node;
    
    }
}







