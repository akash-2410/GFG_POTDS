----------------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------------------
Given a square matrix mat[][] of n*n size, the task is to determine the diagonal pattern which is a linear arrangement of the elements of the matrix as depicted in the following example:
----------------------------------------------------------------------------------------------------Example--------------------------------------------------------------------------------------------------------
Example 1:
Input:
n = 3
mat[][] = {{1, 2, 3},
           {4, 5, 6},
           {7, 8, 9}}
Output: {1, 2, 4, 7, 5, 3, 6, 8, 9}
Explaination:
Starting from (0, 0): 1,
Move to the right to (0, 1): 2,
Move diagonally down to (1, 0): 4,
Move diagonally down to (2, 0): 7,
Move diagonally up to (1, 1): 5,
Move diagonally up to (0, 2): 3,
Move to the right to (1, 2): 6,
Move diagonally up to (2, 1): 8,
Move diagonally up to (2, 2): 9
There for the output is {1, 2, 4, 7, 5, 3, 6, 8, 9}.
----------------------------------------------------------------------------------------------------Code & Explanation--------------------------------------------------------------------------------------------
class Solution {
    public int[] matrixDiagonally(int[][] mat) {
        int row=0,col=0,n=mat.length;
        boolean isReverse= false; //to do reverse of alternate diagonals  first will remain as it is so it is marked false
        int ans[]=new int[n*n];
        int idx=0;//while storing the values  in ans go on index wise
        while(col<n){ //till the last col
            ArrayList<Integer> temp=new ArrayList<>();
            int i=row,j=col;
            while(i<n && j<n && i>=0 &&j>=0){
            temp.add(mat[i][j]); // add the curr diagonal
            i--;//if at last row so i-- row will move up 
            j++; //col will go right from 0th col
        }
        if(isReverse) Collections.reverse(temp); //if its alternate diagonal so reverse it 
        for(int k=0;k<temp.size();k++){  // and add to ans
            ans[idx++]=temp.get(k);
        }
        if(row!=n-1){
            row++;
            col=0;
        }else{
            col++;
        }
        isReverse=!isReverse; //go on reversing alternate diagonals
      }    
     return ans;    
    }
}
