--------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------
Given an array arr of n integers, count all pairs (arr[i], arr[j]) in it such that i*arr[i] > j*arr[j] and 0 â‰¤ i < j < n.

Note: 0-based Indexing is followed.
--------------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------------
Example 1:
Input :
n = 4
arr[] = {8, 4, 2, 1}
Output :
2
Explanation:
If we see the array after operations
[0*8, 1*4, 2*2, 3*1] => [0, 4, 4, 3]
Pairs which hold the condition i*arr[i] > j*arr[j] are (4,1) and (2,1), so in total 2 pairs are available.

Example 2:
Input :
n = 7
arr[] = {5, 0, 10, 2, 4, 1, 6}
Output:
5
Explanation :
Pairs which hold the condition i*arr[i] > j*arr[j] are (10,2), (10,4), (10,1), (2,1) and (4,1), so in total 5 pairs are there.

--------------------------------------------------------------------------------------------Intution and Code------------------------------------------------------------------------------------

class Solution {
    // Method to merge two sorted subarrays and count inversions
    public int merge(int arr[], int low, int mid, int high) {
        // Create a temporary array to store merged subarrays
        int[] temp = new int[high - low + 1];
        int k = 0; // Index for the temporary array
        int i = low; // Index for the left subarray
        int j = mid + 1; // Index for the right subarray
        int inv = 0; // Count of inversions

        // Merge the two subarrays while counting inversions
        while (i <= mid && j <= high) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++]; // Copy element from left subarray
            } else {
                // If an inversion is found, increment the inversion count
                inv += mid - i + 1;
                temp[k++] = arr[j++]; // Copy element from right subarray
            }
        }

        // Copy remaining elements from the left subarray, if any
        while (i <= mid) {
            temp[k++] = arr[i++];
        }

        // Copy remaining elements from the right subarray, if any
        while (j <= high) {
            temp[k++] = arr[j++];
        }

        // Copy merged elements back to the original array
        for (int x = low; x <= high; x++) {
            arr[x] = temp[x - low];
        }

        // Return the count of inversions
        return inv;
    }

    // Method to recursively sort and count inversions
    public int mergeSort(int arr[], int low, int high) {
        // Base case: if the subarray has one or fewer elements, it's already sorted
        if (low >= high)
            return 0;
        int inv = 0; // Initialize inversion count

        // Find the middle index
        int mid = (low + high) / 2;

        // Recursively sort and count inversions in the left and right subarrays
        inv += mergeSort(arr, low, mid);
        inv += mergeSort(arr, mid + 1, high);
        // Merge the sorted subarrays and count inversions
        inv += merge(arr, low, mid, high);

        // Return the total count of inversions
        return inv;
    }

    // Method to count inversions in an array
    public int inversionCount(int arr[], int N) {
        // Call mergeSort to sort the array and count inversions
        int ans = mergeSort(arr, 0, N - 1);
        return ans;
    }

    // Method to count pairs with specific criteria
    public int countPairs(int arr[], int n) {
        // Multiply each element by its index
        for (int i = 0; i < n; i++) {
            arr[i] *= i;
        }
        // Count inversions in the modified array
        return inversionCount(arr, n);
    }
}

