----------------------------------------------------------------------------------------------Question------------------------------------------------------------------------------------------------------------
Given a Binary Search Tree with n nodes, find the sum of all leaf nodes. BST has the following property (duplicate nodes are possible):

The left subtree of a node contains only nodes with keys less than the node’s key.
The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.
Your task is to determine the total sum of the values of the leaf nodes.

Note: Input array arr doesn't represent the actual BST, it represents the order in which the elements will be added into the BST.

-----------------------------------------------------------------------------------------------Example-------------------------------------------------------------------------------------------------------------
Example 1:
Input:
n = 6
arr = {67, 34, 82, 12, 45, 78}
Output:
135
Explanation:
In first test case, the BST for the given input will be-
                67
             /     \
           34       82
          /   \    /
         12   45  78

Hence, the required sum= 12 + 45 + 78 = 135

-------------------------------------------------------------------------------------------Code & Explanation------------------------------------------------------------------------------------------------------
class Solution
{
    public static int sumOfLeafNodes(Node root)
    {
        // code here 
        // If root is null, return 0
        if(root == null)
          return 0;
          
        // If root has no left or right child, return its data as it is a leaf node
        if(root.left == null && root.right == null)
          return root.data;
          
        // Recursively calculate the sum of leaf nodes in the left and right subtrees
        return sumOfLeafNodes(root.left)+sumOfLeafNodes(root.right);
    }
    }

