---------------------------------------------------------------------------------------------Question-------------------------------------------------------------------------------------------------------------
Given an integer n, return the first n elements of Recamanâ€™s sequence.
It is a function with domain and co-domain as whole numbers. It is recursively defined as below:
Specifically, let a(n) denote the (n+1)th term. (0 being the 1st term).
The rule says:
a(0) = 0
a(n) = a(n-1) - n, if a(n-1) - n > 0 and is not included in the sequence previously
       =  a(n-1) + n otherwise.
---------------------------------------------------------------------------------------------Example-------------------------------------------------------------------------------------------------------------
Example 1:
Input: 
n = 5
Output: 
0 1 3 6 2
Explaination: 
a(0) = 0,
a(1) = a(0)-1 = 0-1 = -1 and -1<0, therefore a(1) = a(0)+1 = 1,
a(2) = a(1)-2 = 1-2 = -1 and -1<0, therefore a(2) = a(1)+2 = 3,
a(3) = a(2)-3 = 3-3 = 0 but since 0 is already present in the sequence, a(3) = a(2)+3 = 3+3 = 6,
a(4) = a(3)-4 = 6-4 = 2.
Therefore the first 5 elements of Recaman's sequence will be 0 1 3 6 2.

-----------------------------------------------------------------------------------------Explanation and Code-------------------------------------------------------------------------------------------------------------

class Solution{
    static ArrayList<Integer> recamanSequence(int n){
        // code 
        ArrayList<Integer> ans= new ArrayList<>();
        HashMap<Integer,Integer> unique=new HashMap<>(); // to check whether the number is already present or not if yes then do not store again
        ans.add(0); //first number will be 0
        unique.put(0,1); //mark value  of 0 to 1 because we got it so mark true 1
        for(int i=1;i<n;i++){
            //check if the value is greater than 0 && also not present in the set so add it and mark the value  with 1 if the number occurs 
            if(ans.get(i-1)-i >0 && unique.get(ans.get(i-1)-i)==null){
                ans.add(ans.get(i-1)-i);//given in question
                unique.put(ans.get(i-1)-i,1);
            }
            else{
                ans.add(ans.get(i-1)+i);//given in question
                unique.put(ans.get(i-1)+i,1);
            }
        }
        
        return ans;
    }
}
