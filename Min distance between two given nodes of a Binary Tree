---------------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------------------

Given a binary tree with n nodes and two node values, a and b, your task is to find the minimum distance between them. The given two nodes are guaranteed to be in the binary tree and all node values are unique.


---------------------------------------------------------------------------------------------------Example--------------------------------------------------------------------------------------------------------
Input:
        1
      /  \
     2    3
a = 2, b = 3
Output: 
2
Explanation: 
We need the distance between 2 and 3. Being at node 2, we need to take two steps ahead in order to reach node 3. The path followed will be: 2 -> 1 -> 3. Hence, the result is 2. 

---------------------------------------------------------------------------------------------------Code--------------------------------------------------------------------------------------------------------
class GfG {
    
    void helper(Node root,ArrayList<Integer> currpath,ArrayList<Integer> pathA,ArrayList<Integer> pathB,int a,int b)
      {
          if(root == null) return ;
          currpath.add(root.data);// go on adding the roots
          if(root.data == a) pathA.addAll(currpath);//if found the a then add its path to this list
          if(root.data==b) pathB.addAll(currpath);//if found the b then add its path to this list
          helper(root.left,currpath,pathA,pathB,a,b);//traverse in left 
          helper(root.right,currpath,pathA,pathB,a,b);//traverse in right
          currpath.remove(currpath.size()-1); // also go on removing the other paths ,bcz patha and pathb will store the path for a,b
      }
     
    
    int findDist(Node root, int a, int b) {
        // Your code here
        ArrayList<Integer> currpath=new ArrayList<>();//to store paths in which we traversing now 
         ArrayList<Integer> pathA=new ArrayList<>();//to store path to reach a
          ArrayList<Integer> pathB=new ArrayList<>();//to store path to reach b
          
          // call helper function which will traverse and add path too the lists
          helper(root,currpath,pathA,pathB,a,b);
          
          /*after this we have to tarverse thorugh the list of pathand path b and check at which 
          point the subtree is dividing in branches by doing this we will able to get the size 
          diffrenece so that we can conut the min distance */
          
          int i=0,j=0;
          while(i<pathA.size() && j<pathB.size()){
              if(pathA.get(i)!=pathB.get(j)) break;// here we have traversed found the diffrent elemnt so break at that point
              i++;
              j++;
          }
          /* eg: we got PathA= 1->3->7 And PathB=1->3->6 so here if we see 1,3 are same and 7,6 are diffrent so that 
          the breakpoint so to count distance we have to get the size of pathA-i(index pos in pathA list) 
          +pathBSize-j(index pos in PathB);*/
          
          return pathA.size()-i+pathB.size()-j; 
    }
}
